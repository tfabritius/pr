generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  deposit
  securities

  @@map("portfolio_account_type")
}

enum TransactionType {
  Payment
  CurrencyTransfer
  DepositInterest
  DepositFee
  DepositTax
  SecuritiesOrder
  SecuritiesDividend
  SecuritiesFee
  SecuritiesTax
  SecuritiesTransfer

  @@map("portfolio_transaction_type")
}

enum TransactionUnitType {
  base
  tax
  fee

  @@map("portfolio_transaction_unit_type")
}

model Account {
  uuid                 String        @db.Uuid
  type                 AccountType
  name                 String        @db.VarChar
  currencyCode         String?       @map("currency_code") @db.Char(3)
  referenceAccountUuid String?       @map("reference_account_uuid") @db.Uuid
  active               Boolean
  note                 String        @default("") @db.VarChar
  portfolioId          Int           @map("portfolio_id")
  updatedAt            DateTime      @default(now()) @map("updated_at") @db.Timestamptz
  currency             Currency?     @relation("accounts_currency", fields: [currencyCode], references: [code])
  portfolio            Portfolio     @relation(fields: [portfolioId], references: [id])
  // referenceAccount     Account?      @relation("accounts_reference_accounts", fields: [portfolioId, referenceAccountUuid], references: [portfolioId, uuid])
  // referencingAccounts  Account[]     @relation("accounts_reference_accounts")
  transactions         Transaction[]

  @@id([portfolioId, uuid])
  @@index([portfolioId])
  @@map("portfolios_accounts")
}

model Clientupdate {
  id        Int      @id @default(autoincrement()) @db.Integer
  timestamp DateTime @db.Timestamp(6)
  version   String   @db.Text
  country   String?  @db.Text
  useragent String?  @db.Text

  @@index([country], name: "clientupdates_country")
  @@index([timestamp], name: "clientupdates_timestamp")
  @@index([version], name: "clientupdates_version")
  @@map("clientupdates")
}

model Currency {
  code                     String            @id @db.Char(3)
  accounts                 Account[]         @relation("accounts_currency")
  events                   Event[]           @relation("events_currency_code")
  exchangeratesBase        Exchangerate[]    @relation("exchangerates_base_currency")
  exchangeratesQuote       Exchangerate[]    @relation("exchangerates_quote_currency")
  securityMarkets          SecurityMarket[]  @relation("securities_markets_currency_code")
  transactionUnits         TransactionUnit[] @relation("transactions_units_currency")
  transactionUnitsOriginal TransactionUnit[] @relation("transactions_units_original_currency")

  portfolios          Portfolio[]
  portfolioSecurities PortfolioSecurity[]

  @@map("currencies")
}

model Event {
  id           Int       @id @default(autoincrement()) @db.Integer
  date         DateTime  @db.Date
  type         String    @db.VarChar(10)
  amount       Decimal?  @db.Decimal(10, 4)
  currencyCode String?   @map("currency_code") @db.Char(3)
  currency     Currency? @relation("events_currency_code", fields: [currencyCode], references: [code])
  ratio        String?   @db.VarChar(10)
  securityUuid String    @map("security_uuid") @db.Uuid
  security     Security  @relation("events_security_uuid", fields: [securityUuid], references: [uuid])

  @@index([securityUuid], name: "events_security_uuid")
  @@map("events")
}

model Exchangerate {
  id                Int                 @id @default(autoincrement())
  baseCurrencyCode  String              @map("base_currency_code") @db.Char(3)
  quoteCurrencyCode String              @map("quote_currency_code") @db.Char(3)
  baseCurrency      Currency            @relation("exchangerates_base_currency", fields: [baseCurrencyCode], references: [code])
  quoteCurrency     Currency            @relation("exchangerates_quote_currency", fields: [quoteCurrencyCode], references: [code])
  prices            ExchangeratePrice[]

  @@unique([baseCurrencyCode, quoteCurrencyCode])
  @@map("exchangerates")
}

model ExchangeratePrice {
  exchangerateId Int          @map("exchangerate_id")
  date           DateTime     @db.Date
  value          Decimal      @db.Decimal(16, 8)
  exchangerate   Exchangerate @relation(fields: [exchangerateId], references: [id])

  @@id([exchangerateId, date])
  @@index([exchangerateId])
  @@map("exchangerates_prices")
}

model Market {
  code            String           @id @db.Text
  name            String           @db.Text
  securityMarkets SecurityMarket[] @relation("securities_markets_market_code")

  @@map("markets")
}

model Portfolio {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar
  note                String              @db.VarChar
  baseCurrencyCode    String              @map("base_currency_code") @db.Char(3)
  createdAt           DateTime            @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime            @default(now()) @map("updated_at") @db.Timestamptz
  userId              Int                 @map("user_id")
  baseCurrency        Currency            @relation(fields: [baseCurrencyCode], references: [code])
  user                User                @relation("portfolios_user", fields: [userId], references: [id])
  accounts            Account[]
  portfolioSecurities PortfolioSecurity[]
  transactions        Transaction[]

  @@index([userId])
  @@map("portfolios")
}

model PortfolioSecurity {
  name          String                   @db.VarChar
  uuid          String                   @db.Uuid
  currencyCode  String                   @map("currency_code") @db.Char(3)
  isin          String                   @default("") @db.VarChar
  wkn           String                   @default("") @db.VarChar
  symbol        String                   @default("") @db.VarChar
  active        Boolean
  note          String                   @default("") @db.VarChar
  portfolioId   Int                      @map("portfolio_id")
  securityUuid  String?                  @map("security_uuid") @db.Uuid
  updatedAt     DateTime                 @default(now()) @map("updated_at") @db.Timestamptz
  calendar      String?                  @db.Text
  feed          String?                  @db.Text
  feedUrl       String?                  @map("feed_url") @db.Text
  latestFeed    String?                  @map("latest_feed") @db.Text
  latestFeedUrl String?                  @map("latest_feed_url") @db.Text
  attributes    Json?                    @db.JsonB
  events        Json?                    @db.JsonB
  properties    Json?                    @db.JsonB
  currency      Currency                 @relation(fields: [currencyCode], references: [code])
  portfolio     Portfolio                @relation(fields: [portfolioId], references: [id])
  prices        PortfolioSecurityPrice[]
  security      Security?                @relation(fields: [securityUuid], references: [uuid])
  // transactions Transaction[]

  @@id([portfolioId, uuid])
  @@index([portfolioId])
  @@map("portfolios_securities")
}

model PortfolioSecurityPrice {
  portfolioId           Int               @map("portfolio_id")
  portfolioSecurityUuid String            @map("portfolio_security_uuid") @db.Uuid
  date                  DateTime          @db.Date
  value                 Decimal           @db.Decimal(16, 8)
  portfolioSecurity     PortfolioSecurity @relation(fields: [portfolioId, portfolioSecurityUuid], references: [portfolioId, uuid])

  @@id([portfolioId, portfolioSecurityUuid, date])
  @@index([portfolioId, portfolioSecurityUuid])
  @@map("portfolios_securities_prices")
}

model Security {
  uuid                String              @id @db.Uuid
  name                String?             @db.Text
  isin                String?             @db.VarChar(12)
  wkn                 String?             @db.VarChar(6)
  symbolXfra          String?             @map("symbol_xfra") @db.VarChar(10)
  symbolXnas          String?             @map("symbol_xnas") @db.VarChar(10)
  symbolXnys          String?             @map("symbol_xnys") @db.VarChar(10)
  securityType        String?             @map("security_type") @db.Text
  events              Event[]             @relation("events_security_uuid")
  securityMarkets     SecurityMarket[]    @relation("securities_markets_security_uuid")
  securityTaxonomies  SecurityTaxonomy[]  @relation("securities_taxonomies_security_uuid")
  portfolioSecurities PortfolioSecurity[] @relation

  @@index([isin], name: "securities_isin")
  @@index([name], name: "securities_name")
  @@index([securityType], name: "securities_security_type")
  @@index([symbolXfra], name: "securities_symbol_xfra")
  @@index([symbolXnas], name: "securities_symbol_xnas")
  @@index([symbolXnys], name: "securities_symbol_xnys")
  @@index([wkn], name: "securities_wkn")
  @@map("securities")
}

model SecurityMarket {
  id             Int                   @id @default(autoincrement()) @db.Integer
  securityUuid   String                @map("security_uuid") @db.Uuid
  marketCode     String                @map("market_code") @db.Text
  currencyCode   String                @map("currency_code") @db.Char(3)
  firstPriceDate DateTime?             @map("first_price_date") @db.Date
  lastPriceDate  DateTime?             @map("last_price_date") @db.Date
  symbol         String?               @db.VarChar(10)
  updatePrices   Boolean               @map("update_prices") @db.Boolean
  security       Security              @relation("securities_markets_security_uuid", fields: [securityUuid], references: [uuid])
  market         Market                @relation("securities_markets_market_code", fields: [marketCode], references: [code])
  currency       Currency              @relation("securities_markets_currency_code", fields: [currencyCode], references: [code])
  prices         SecurityMarketPrice[] @relation("securities_markets_prices_security_market_id")

  @@unique([securityUuid, marketCode], name: "securities_markets_security_uuid_market_code")
  @@index([securityUuid], name: "securities_markets_security_uuid")
  @@map("securities_markets")
}

model SecurityMarketPrice {
  securityMarketId Int            @map("security_market_id") @db.Integer
  securityMarket   SecurityMarket @relation("securities_markets_prices_security_market_id", fields: [securityMarketId], references: [id])
  date             DateTime       @db.Date
  close            Decimal        @db.Decimal(10, 4)

  @@id([securityMarketId, date])
  @@index([securityMarketId])
  @@map("securities_markets_prices")
}

model SecurityTaxonomy {
  securityUuid String   @map("security_uuid") @db.Uuid
  taxonomyUuid String   @map("taxonomy_uuid") @db.Uuid
  weight       Decimal  @db.Decimal(5, 2)
  security     Security @relation("securities_taxonomies_security_uuid", fields: [securityUuid], references: [uuid])
  taxonomy     Taxonomy @relation("securities_taxonomies_taxonomy_uuid", fields: [taxonomyUuid], references: [uuid])

  @@id([taxonomyUuid, securityUuid])
  @@map("securities_taxonomies")
}

model Session {
  token          String   @id @db.Uuid
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz
  lastActivityAt DateTime @default(now()) @map("last_activity_at") @db.Timestamptz
  note           String   @default("") @db.Text
  userId         Int      @map("user_id")
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([lastActivityAt])
  @@map("sessions")
}

model Taxonomy {
  uuid               String             @id @db.Uuid
  parentUuid         String?            @map("parent_uuid") @db.Uuid
  rootUuid           String?            @map("root_uuid") @db.Uuid
  name               String             @db.Text
  code               String?            @db.Text
  parent             Taxonomy?          @relation("taxonomies_parent_uuid", fields: [parentUuid], references: [uuid])
  root               Taxonomy?          @relation("taxonomies_root_uuid", fields: [rootUuid], references: [uuid])
  securityTaxonomies SecurityTaxonomy[] @relation("securities_taxonomies_taxonomy_uuid")
  children           Taxonomy[]         @relation("taxonomies_parent_uuid")
  descendants        Taxonomy[]         @relation("taxonomies_root_uuid")

  @@unique([rootUuid, code], name: "taxonomies_root_uuid_code")
  @@index([parentUuid], name: "taxonomies_parent_uuid")
  @@index([rootUuid], name: "taxonomies_root_uuid")
  @@map("taxonomies")
}

model Transaction {
  uuid                   String            @db.Uuid
  accountUuid            String            @map("account_uuid") @db.Uuid
  type                   TransactionType
  datetime               DateTime          @db.Timestamptz
  partnerTransactionUuid String?           @map("partner_transaction_uuid") @db.Uuid
  shares                 Decimal?          @db.Decimal(16, 8)
  portfolioSecurityUuid  String?           @map("portfolio_security_uuid") @db.Uuid
  note                   String            @default("") @db.VarChar
  portfolioId            Int               @map("portfolio_id")
  updatedAt              DateTime          @default(now()) @map("updated_at") @db.Timestamptz
  account                Account           @relation(fields: [portfolioId, accountUuid], references: [portfolioId, uuid])
  // partnerTransaction        Transaction?      @relation("transactions_partner_transaction", fields: [portfolioId, partnerTransactionUuid], references: [portfolioId, uuid])
  // partnerTransactionReverse Transaction?      @relation("transactions_partner_transaction")
  portfolio              Portfolio         @relation(fields: [portfolioId], references: [id])
  // portfolioSecurity         PortfolioSecurity? @relation(fields: [portfolioId, portfolioSecurityUuid], references: [portfolioId, uuid])
  units                  TransactionUnit[]

  @@id([portfolioId, uuid])
  @@unique([portfolioId, partnerTransactionUuid])
  @@index([portfolioId])
  @@index([portfolioId, accountUuid])
  @@index([portfolioId, portfolioSecurityUuid])
  @@map("portfolios_transactions")
}

model TransactionUnit {
  id                   Int                 @id @default(autoincrement())
  type                 TransactionUnitType
  amount               Decimal             @db.Decimal(10, 2)
  currencyCode         String              @map("currency_code") @db.Char(3)
  originalAmount       Decimal?            @map("original_amount") @db.Decimal(10, 2)
  originalCurrencyCode String?             @map("original_currency_code") @db.Char(3)
  exchangeRate         Decimal?            @map("exchange_rate") @db.Decimal(16, 8)
  transactionUuid      String              @map("transaction_uuid") @db.Uuid
  portfolioId          Int                 @map("portfolio_id")
  currency             Currency            @relation("transactions_units_currency", fields: [currencyCode], references: [code])
  originalCurrency     Currency?           @relation("transactions_units_original_currency", fields: [originalCurrencyCode], references: [code])
  transaction          Transaction         @relation(fields: [portfolioId, transactionUuid], references: [portfolioId, uuid])

  @@index([portfolioId, transactionUuid])
  @@map("portfolios_transactions_units")
}

model User {
  id         Int         @id @default(autoincrement())
  username   String      @unique @db.VarChar
  password   String?     @db.VarChar
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz
  lastSeenAt DateTime    @default(dbgenerated("CURRENT_DATE")) @map("last_seen_at") @db.Date
  isAdmin    Boolean     @default(false) @map("is_admin") @db.Boolean
  portfolios Portfolio[] @relation("portfolios_user")
  sessions   Session[]

  @@map("users")
}
